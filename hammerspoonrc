hs.hotkey.bind({'cmd', 'alt', 'ctrl'}, 'r', function()
	hs.reload()
	hs.alert.show('Config loaded')
end)

hs.hotkey.bind({'cmd', 'alt', 'ctrl'}, 'right', function()
	hs.window.focusedWindow():moveToUnit('[75, 0, 100, 100]')
end)

hs.hotkey.bind('ctrl', 'space', function()
	hs.focus()
	local isCancelled, response = hs.dialog.textPrompt("hammerspoon", "what can I do you for?")

	local commands = {
		webdev = setUpForWebDev,
		ch = function() launch('Google Chrome') end,
		t = function() launch('Alacritty') end
	}

	for key, value in pairs(commands) do
		if response == key then value() end
	end
end)

function launch(application)
	hs.application.launchOrFocus(application)
end

function isExpectedScreen() return screen ~= 'LG Ultra HD' end

function waitingForWindow(title, func)
	if hs.window.find(title) then return end
	hs.timer.delayed.new(0.5, func):start()
	return true
end

function applyWebDevLayout()
	hs.layout.apply({
		{"Alacritty", nil, screen, {x = 0.5, y = 0, w = 0.25, h = 1}, nil, nil},
		{"Google Chrome", nil, screen, {x = 0, y = 0, w = 0.5, h = 0.75}, nil, nil}
	})

	hs.window.find('DevTools'):moveToUnit('[0, 75, 50, 100]')
end

function setUpForWebDev()
	local screen = hs.screen.allScreens()[1]:name()
	if not isExpectedScreen() then
		hs.dialog.blockAlert("hammerspoon", "I'm not sure how to set up on this display")
		return true
	end

	hs.application.launchOrFocus('Google Chrome')
	if waitingForWindow('Google Chrome', setUpForWebDev) then return end

	if not hs.window.find('DevTools') then
		hs.window.find('Google Chrome'):application():selectMenuItem({'View', 'Developer', 'JavaScript Console'})
		hs.timer.delayed.new(0.5, setUpForWebDev):start()
	end

	applyWebDevLayout()
end

hs.window.filter.new('Google Chrome')
	:subscribe(hs.window.filter.windowFocused, function()
		if chromeModal then return true end

		chromeModal = hs.hotkey.modal.new({'ctrl', 'alt', 'cmd'}, 'space')

		chromeModal:bind('', 'c', function()
			chromeModal:exit()
			local chrome = hs.appfinder.appFromName('Google Chrome')
			chrome:selectMenuItem({ 'View', 'Developer', 'JavaScript Console' })
		end)

		chromeModal:bind('', 'p', function()
			chromeModal:exit()

			function deleteModalBindings()
				for i, binding in pairs(chromeModalBindings) do binding:delete() end
			end

			function selectChromeMenu(option)
				hs.appfinder.appFromName('Google Chrome'):selectMenuItem(option)
			end

			chromeModalBindings = {
				hs.hotkey.bind('', 'escape', function()
					deleteModalBindings()
				end),

				hs.hotkey.bind('', 'a', function()
					deleteModalBindings()
					selectChromeMenu({'People', 'Nutrien Admin'})
				end),

				hs.hotkey.bind('', 'd', function()
					deleteModalBindings()
					selectChromeMenu({'People', 'Nutrien Dev'})
				end),

				hs.hotkey.bind('', 'n', function()
					deleteModalBindings()
					selectChromeMenu({'People', 'Nutrien'})
				end),

				hs.hotkey.bind('', 't', function()
					deleteModalBindings()
					selectChromeMenu({'People', 'T-Lo'})
				end)
			}
		end)

		chromeModal:bind('', 'escape', function()
			chromeModal:exit()
		end)
	end)
	:subscribe(hs.window.filter.windowUnfocused, function()
		chromeModal:delete()
		chromeModal = nil
	end)

hs.window.filter.new('Mail')
	:subscribe(hs.window.filter.windowFocused, function()
		if mailModal then return true end

		mailHotkeys = {
			hs.hotkey.bind('cmd', 'return', function()
				mail:selectMenuItem({'Message', 'Send'})
			end)
		}

		mailModal = hs.hotkey.modal.new({'ctrl', 'alt', 'cmd'}, 'space')
		mail = hs.appfinder.appFromName('Mail')

		mailModal:bind('', 'a', function()
			mailModal:exit()
			mail:selectMenuItem({'Message', 'Archive'})
		end)

		mailModal:bind('', 'escape', function()
			mailModal:exit()
		end)
	end)
	:subscribe(hs.window.filter.windowUnfocused, function()
		mailModal:delete()
		mailModal = nil
		mail = nil

		for i, hotkey in ipairs(mailHotkeys) do hotkey:delete() end
	end)

hs.window.filter.new('Microsoft Outlook')
	:subscribe(hs.window.filter.windowFocused, function()
		if outlookModal then return true end

		outlookModal = hs.hotkey.modal.new({'ctrl', 'alt', 'cmd'}, 'space')
		outlook = hs.appfinder.appFromName('Microsoft Outlook')

		local commands = { }
		commands['l'] = {'Draft', 'Send Later...'}
		commands['/'] = {'Edit', 'Find', 'Outlook Items Search'}
		commands['n'] = {'View', 'Next Pane'}
		commands['f'] = {'Message', 'Forward'}

		for key, command in pairs(commands) do
			outlookModal:bind('', key, function()
				outlookModal:exit()
				outlook:selectMenuItem(command)
			end)
		end

		outlookModal:bind('', 'escape', function()
			outlookModal:exit()
		end)
	end)
	:subscribe(hs.window.filter.windowUnfocused, function()
		outlookModal:delete()
		outlookModal = nil
		outlook = nil
	end)

hs.window.filter.new('iTerm2')
	:subscribe(hs.window.filter.windowFocused, function()
		if iTerm2Modal then return true end

		iTerm2Modal = hs.hotkey.modal.new({'ctrl', 'alt', 'cmd'}, 'space')

		iTerm2Modal:bind('', 'escape', function()
			iTerm2Modal:exit()
		end)

		iTerm2Modal:bind('', 'r', function()
			iTerm2Modal:exit()

			local iTerm2 = hs.application.frontmostApplication()

			local chrome = hs.appfinder.appFromName('Google Chrome')
			chrome:activate()
			hs.eventtap.keyStroke("cmd", "r")

			iTerm2:activate()
		end)
	end)
	:subscribe(hs.window.filter.windowUnfocused, function()
		if iTerm2Modal then
			iTerm2Modal:delete()
			iTerm2Modal = nil
		end
	end)

hs.ipc.cliInstall()
hs.alert.show('Config loaded')
