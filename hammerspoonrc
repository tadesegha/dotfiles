hs.hotkey.bind({'cmd', 'alt', 'ctrl'}, 'r', function()
	hs.reload()
	hs.alert.show('Config loaded')
end)

hs.hotkey.bind('ctrl', 'space', function()
	local currentWindow = hs.window.frontmostWindow();
	hs.focus()
	local isCancelled, response = hs.dialog.textPrompt("hammerspoon", "what can I do you for?")

	if response == 'web dev' then setUpForWebDev() end
	currentWindow:focus()
end)

function setUpForWebDev()
	local screen = hs.screen.allScreens()[1]:name()
	if screen ~= 'LG Ultra HD' then
		hs.dialog.blockAlert("hammerspoon", "I'm not sure how to set up on this display")
		return true
	end

	local layout = {
		{"Alacritty", nil, screen, {x = 0.5, y = 0, w = 0.25, h = 1}, nil, nil},
		{"Google Chrome", nil, screen, {x = 0, y = 0, w = 0.5, h = 1}, nil, nil},
	}
	hs.layout.apply(layout);
end

hs.window.filter.new('Google Chrome')
	:subscribe(hs.window.filter.windowFocused, function()
		if chromeModal then return true end

		chromeModal = hs.hotkey.modal.new('ctrl', 'space')

		chromeModal:bind('', 'c', function()
			chromeModal:exit()
			local chrome = hs.appfinder.appFromName('Google Chrome')
			chrome:selectMenuItem({ 'View', 'Developer', 'JavaScript Console' })
		end)

		chromeModal:bind('', 'p', function()
			chromeModal:exit()

			function deleteModalBindings()
				for i, binding in pairs(chromeModalBindings) do binding:delete() end
			end

			function selectChromeMenu(option)
				hs.appfinder.appFromName('Google Chrome'):selectMenuItem(option)
			end

			chromeModalBindings = {
				hs.hotkey.bind('', 'escape', function()
					deleteModalBindings()
				end),

				hs.hotkey.bind('', 'a', function()
					deleteModalBindings()
					selectChromeMenu({'People', 'Nutrien Admin'})
				end),

				hs.hotkey.bind('', 'd', function()
					deleteModalBindings()
					selectChromeMenu({'People', 'Nutrien Dev'})
				end),

				hs.hotkey.bind('', 'n', function()
					deleteModalBindings()
					selectChromeMenu({'People', 'Nutrien'})
				end),

				hs.hotkey.bind('', 't', function()
					deleteModalBindings()
					selectChromeMenu({'People', 'T-Lo'})
				end)
			}
		end)

		chromeModal:bind('', 'escape', function()
			chromeModal:exit()
		end)
	end)
	:subscribe(hs.window.filter.windowUnfocused, function()
		chromeModal:delete()
		chromeModal = nil
	end)

hs.window.filter.new('Mail')
	:subscribe(hs.window.filter.windowFocused, function()
		if mailModal then return true end

		mailHotkeys = {
			hs.hotkey.bind('cmd', 'return', function()
				mail:selectMenuItem({'Message', 'Send'})
			end)
		}

		mailModal = hs.hotkey.modal.new('ctrl', 'space')
		mail = hs.appfinder.appFromName('Mail')

		mailModal:bind('', 'a', function()
			mailModal:exit()
			mail:selectMenuItem({'Message', 'Archive'})
		end)

		mailModal:bind('', 'escape', function()
			mailModal:exit()
		end)
	end)
	:subscribe(hs.window.filter.windowUnfocused, function()
		mailModal:delete()
		mailModal = nil
		mail = nil

		for i, hotkey in ipairs(mailHotkeys) do hotkey:delete() end
	end)

hs.window.filter.new('Microsoft Outlook')
	:subscribe(hs.window.filter.windowFocused, function()
		if outlookModal then return true end

		outlookModal = hs.hotkey.modal.new('ctrl', 'space')
		outlook = hs.appfinder.appFromName('Microsoft Outlook')

		local commands = { }
		commands['l'] = {'Draft', 'Send Later...'}
		commands['/'] = {'Edit', 'Find', 'Outlook Items Search'}
		commands['n'] = {'View', 'Next Pane'}
		commands['f'] = {'Message', 'Forward'}

		for key, command in pairs(commands) do
			outlookModal:bind('', key, function()
				outlookModal:exit()
				outlook:selectMenuItem(command)
			end)
		end

		outlookModal:bind('', 'escape', function()
			outlookModal:exit()
		end)
	end)
	:subscribe(hs.window.filter.windowUnfocused, function()
		outlookModal:delete()
		outlookModal = nil
		outlook = nil
	end)

hs.window.filter.new('iTerm2')
	:subscribe(hs.window.filter.windowFocused, function()
		if iTerm2Modal then return true end

		iTerm2Modal = hs.hotkey.modal.new('ctrl', 'space')

		iTerm2Modal:bind('', 'escape', function()
			iTerm2Modal:exit()
		end)

		iTerm2Modal:bind('', 'r', function()
			iTerm2Modal:exit()

			local iTerm2 = hs.application.frontmostApplication()

			local chrome = hs.appfinder.appFromName('Google Chrome')
			chrome:activate()
			hs.eventtap.keyStroke("cmd", "r")

			iTerm2:activate()
		end)
	end)
	:subscribe(hs.window.filter.windowUnfocused, function()
		if iTerm2Modal then
			iTerm2Modal:delete()
			iTerm2Modal = nil
		end
	end)

hs.ipc.cliInstall()
hs.alert.show('Config loaded')
