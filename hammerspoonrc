require("hs.ipc")
hs.ipc.cliInstall()

choose = '/usr/local/bin/choose -c transparent'

hs.hotkey.bind('alt', 'space', function()
  hs.application.frontmostApplication():selectMenuItem({'Help'})
end)

hs.hotkey.bind({'ctrl', 'alt', 'shift'}, 'space', function()
  local commands = {
    terminal = function() hs.application.launchOrFocus('iTerm2') end,
    focusEditor = focusEditor,
    devTools = devTools,
    resizeWindow = resizeWindow,
    reload = reload,
    getPassword = getPassword
  }

  local choice = getChoice(commands)
  for key, value in pairs(commands) do
    if choice == key then value() end
  end
end)

function getPassword()
  local success = hs.execute('pass -c $(ls ~/.password-store | grep gpg | cut -d "." -f 1 | ' .. choose .. ')', true)
  hs.alert.show('password copied to clipboard')
end

function getChoice(choices)
  local commands = ''
  for key in pairs(choices) do commands = commands .. '\\\\n' .. key end
  return hs.execute('echo ' .. commands .. '| ' .. choose)
end

function getKeyboardInput(message)
  local currentWindow = hs.window.focusedWindow()
  hs.focus()
  local isCancelled, response = hs.dialog.textPrompt("hammerspoon", message, '', 'OK', 'Cancel')

  if isCancelled == 'Cancel' then
    currentWindow:focus()
    return
  end

  return currentWindow, response
end

function reload()
  hs.reload()
  hs.alert.show('Config loaded')
end

function resizeWindow()
  local currentWindow = hs.window.focusedWindow()

  hs.focus()
  local btnSelected, response = hs.dialog.textPrompt("resize window", "enter unit dimensions (x, dx, y, dy)", '', 'OK', 'Cancel')
  if btnSelected == 'Cancel' then return end

  currentWindow:focus()
  local components = split(response, ",")
  local x = tonumber(components[1]) or 0
  local dx = tonumber(components[2]) or (10 - (10 * x))
  local y = tonumber(components[3]) or 0
  local dy = tonumber(components[4]) or (10 - (10 * y))

  dx = (dx - x) / 10
  x = x / 10
  dy = (dy - y) / 10
  y = y / 10
  currentWindow:moveToUnit(hs.geometry.rect(x, y, dx, dy))
end

function split(str, delimiter)
  result = {};
  for match in (str..delimiter):gmatch("(.-)"..delimiter) do
    table.insert(result, match)
  end
  return result
end

function showDialog(message)
  hs.dialog.blockAlert('hammerspoon', message)
end

function devTools()
  hs.application.frontmostApplication():selectMenuItem({'View', 'Developer', 'JavaScript Console'})
end

function isExpectedScreen() 
  local screen = hs.screen.mainScreen():name()
  if screen == 'LG Ultra HD' then return true end
  hs.dialog.blockAlert("hammerspoon", "I'm not sure how to set up on this display")
  return false
end

function waitingForWindow(title, func)
  if hs.window.find(title) then return end
  hs.timer.delayed.new(0.5, func):start()
  return true
end

function focusEditor()
  if not isExpectedScreen() then return end
  hs.layout.apply({
    {"Brave Browser", nil, nil, {x = 0, y = 0, w = 0.4, h = 1}, nil, nil},
    {"iTerm2", nil, nil, {x = 0.4, y = 0, w = 0.6, h = 1}, nil, nil},
  })
end

hs.window.filter.new('Brave Browser')
  :subscribe(hs.window.filter.windowFocused, function()
    if braveModal then return true end

    braveBindings = {
      hs.hotkey.bind('cmd', '1', function()
        hs.application.frontmostApplication():selectMenuItem({ 'Profiles', 'Default' })
      end),

      hs.hotkey.bind('cmd', '2', function()
        hs.application.frontmostApplication():selectMenuItem({ 'Profiles', 'Central Market' })
      end),

      hs.hotkey.bind('cmd', '3', function()
        hs.application.frontmostApplication():selectMenuItem({ 'Profiles', 'Stoke' })
      end),
    }
  end)
  :subscribe(hs.window.filter.windowUnfocused, function()
    for key, binding in pairs(braveBindings) do binding:delete() end
  end)

hs.window.filter.new('Google Chrome')
  :subscribe(hs.window.filter.windowFocused, function()
    if chromeModal then return true end

    chromeBindings = {
      hs.hotkey.bind('cmd', '1', function()
        hs.application.frontmostApplication():selectMenuItem({ 'People', 'T-Lo' })
      end),

      hs.hotkey.bind('cmd', '2', function()
        hs.application.frontmostApplication():selectMenuItem({ 'People', 'Nutrien' })
      end),

      hs.hotkey.bind('cmd', '3', function()
        hs.application.frontmostApplication():selectMenuItem({ 'People', 'Nutrien Admin' })
      end),

      hs.hotkey.bind('cmd', '4', function()
        hs.application.frontmostApplication():selectMenuItem({ 'People', 'Tolu (Stoke)' })
      end)
    }

    chromeModal = hs.hotkey.modal.new({'ctrl', 'alt', 'cmd'}, 'space')

    chromeModal:bind('', 'c', function()
      chromeModal:exit()
      local chrome = hs.appfinder.appFromName('Google Chrome')
      chrome:selectMenuItem({ 'View', 'Developer', 'JavaScript Console' })
    end)

    chromeModal:bind('', 'p', function()
      chromeModal:exit()

      function deleteModalBindings()
        for i, binding in pairs(chromeModalBindings) do binding:delete() end
      end

      function selectChromeMenu(option)
        hs.appfinder.appFromName('Google Chrome'):selectMenuItem(option)
      end

      chromeModalBindings = {
        hs.hotkey.bind('', 'escape', function()
          deleteModalBindings()
        end),

        hs.hotkey.bind('', 'a', function()
          deleteModalBindings()
          selectChromeMenu({'People', 'Nutrien Admin'})
        end),

        hs.hotkey.bind('', 'd', function()
          deleteModalBindings()
          selectChromeMenu({'People', 'Nutrien Dev'})
        end),

        hs.hotkey.bind('', 'n', function()
          deleteModalBindings()
          selectChromeMenu({'People', 'Nutrien'})
        end),

        hs.hotkey.bind('', 't', function()
          deleteModalBindings()
          selectChromeMenu({'People', 'T-Lo'})
        end)
      }
    end)

    chromeModal:bind('', 'escape', function()
      chromeModal:exit()
    end)
  end)
  :subscribe(hs.window.filter.windowUnfocused, function()
    chromeModal:delete()
    chromeModal = nil

    for key, binding in pairs(chromeBindings) do binding:delete() end
  end)

hs.ipc.cliInstall()
hs.alert.show('Config loaded')
